<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance on masoudkf</title><link>https://masoudkarimif.github.io/tags/performance/</link><description>Recent content in Performance on masoudkf</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 06 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://masoudkarimif.github.io/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Heaps Don't Lie; They Save Lives</title><link>https://masoudkarimif.github.io/posts/heaps-dont-lie/</link><pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate><guid>https://masoudkarimif.github.io/posts/heaps-dont-lie/</guid><description>
Go's `container` package helps you create heaps, although not as easy as other languages like Python do. But that makes it more fun.</description></item><item><title>Benchmarking Go Sort Functions</title><link>https://masoudkarimif.github.io/posts/benchmarking-go-sort-functions/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://masoudkarimif.github.io/posts/benchmarking-go-sort-functions/</guid><description>
Go's standard library comes with several sort functions to sort a slice. In this post, I'll go over some of them to see which one runs faster.</description></item></channel></rss>